generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole      @default(employee)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  password      String
  phoneNumber   String?       @unique
  sells         Sell[]
  transaction   Transaction[]
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] // Relation to products in this category
}

model Product {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  categoryId    String     @db.ObjectId
  category      Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  price         Float
  description   String
  stockQuantity Int
  variants      Variant[] // Relation to product variants
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  orderItem     SellItem[]
}

model Variant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  color     String
  skus      SKU[] // Relation to SKUs within this variant
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SKU {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  variantId     String     @db.ObjectId
  variant       Variant    @relation(fields: [variantId], references: [id], onDelete: Cascade)
  size          String
  sku           String     @unique
  stockQuantity Int // Stock quantity specific to this SKU
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  sellItem      SellItem[]
}

model SellItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sellId    String   @db.ObjectId
  sell      Sell     @relation(fields: [sellId], references: [id], onDelete: Cascade)
  skuId     String   @db.ObjectId
  sku       SKU      @relation(fields: [skuId], references: [id], onDelete: Cascade)
  price     Float
  quantity  Int
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Sell {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      SellItem[]
  total      Float
  type       Type
  status     String     @default("pending")
  discount   Float
  customerId String?    @db.ObjectId
  customer   Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  accountId  String     @db.ObjectId // New field to link to Accounts
  account    Accounts   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum Type {
  cash
  digital
}

model Customer {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  phone        String? @unique
  orders       Sell[]
  customerType String
}

model Accounts {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  account      String // This field represents the account type (e.g., "KES", "USD")
  balance      Float // This field holds the balance of the account
  cashBalance  Float // This field holds the balance of the account
  default      Boolean       @default(false) // This field holds the balance of the account
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  sells        Sell[] // New relation to Sell model
}

model TransactionCategory {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @unique // Category name (e.g., rent, salary)
  description  String? // Optional description of the category
  isAdmin      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] // Relation to transactions using this category
}

model Transaction {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  userId        String              @db.ObjectId
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  details       String
  amount        Float
  amountType    String
  type          TransactionType?    @default(cash)
  accountId     String              @db.ObjectId
  account       Accounts            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  acc           String?
  tranDate      DateTime
  ref           String
  categoryId    String              @db.ObjectId
  category      TransactionCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  // New fields for managing exchange transactions
  isExchange    Boolean?            @default(false) // Whether this is an exchange transaction
  exchangeType  exchangeType?       @default(withdrawal)
  fromType      TransactionType? // The type being converted from (cash or digital)
  phone         String? // Phone number for the transaction 
  toType        TransactionType? // The type being converted to (cash or digital)
  // New fields for storing sender/receiver details
  senderName    String? // Name of the person sending the money
  senderPhone   String? // Phone number of the sender
  receiverName  String? // Name of the person receiving the money
  receiverPhone String? // Phone number of the receiver
}

enum exchangeType {
  withdrawal
  deposit
}

// Enum to define Transaction Type
enum TransactionType {
  cash
  digital
}

// Enum to define user roles
enum UserRole {
  admin
  employee
}
